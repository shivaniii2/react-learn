As of now we are bringing React and ReactDOM in our project through cdn scripts which is indeed not a good practice as cdn calls are expensive as here we have to make a network call to https://unpkg.com and also react version can vary time to time in future . 


so we are now going to bring react and reactDom in out project as a dependency/package/library through npm as npm has react and ReactDom as packages also 

let us use npm install react and npm install react-dom and notice changes in package.json , package-lock.json and node modules
after this now we can remove those scripts in index.html as they have no use now.


until now our project knew about React and ReactDOM through cdn links but now as there is no React through cdn so we need to import both of them from node modules through an import statement.

After importing react we still encountered an error that says that "browser scripts can not have import statements"  so we need to tell js that it is not a browser script (App.js) by providing an attribute type="module" .

Let us understand in brief what changes or differences does this attribute make to the script .


When you include the type="module" attribute in a script tag, it signifies that the script should be treated as an ECMAScript module.
Here's what the type="module" attribute does:

Module Loading:

With type="module", the script is treated as an ECMAScript module, and it enables the use of the import and export statements to define dependencies between different JavaScript files.
Scoped Variables:

Variables declared in a module are scoped to that module by default. They are not added to the global scope, which helps prevent naming conflicts and enhances code encapsulation.
Strict Mode:

Modules are automatically in strict mode. This means that certain error-prone or deprecated features of JavaScript are either restricted or disallowed, resulting in more reliable and maintainable code.
Asynchronous Loading:

Modules are loaded asynchronously, which means they do not block other elements on the page from loading. This can lead to improved page loading performance.

so now you can run your app through react from node_modules itself.



Did you see something ? As soon as you are making any chnages to your code at any point and saving the file , page reloads automatically and reflects the changes we just made in our code . How ?
this is something given to us by parcel through HMR 
Let us understand HMR in detail:
HMR stands for Hot Module Replacement, and it is a feature that allows developers to update the application code in real-time while the application is running, without requiring a full page reload. This is particularly useful during the development phase as it significantly speeds up the development process.
HMR enables the replacement of modules (pieces of code) in an application while it is running. Instead of refreshing the entire page, only the modified modules are updated, preserving the current application state.
Parcel, the web application bundler, does support Hot Module Replacement (HMR) out of the box. HMR is a native feature in Parcel, and you typically don't need to configure or set it up explicitly.
Parcel caches dependencies between builds. When you run Parcel for the first time, it downloads and caches the dependencies specified in your project. Subsequent builds can reuse these cached dependencies unless there are changes or updates.
Hence teh above line concluded by our application is taking different amount of time to build.

parcel also uses this file watching algorithm which is written in c++ .
do you know that image rendering in dom is most expensive and Parcel includes built-in image optimization as part of its asset processing capabilities. When you use Parcel to build your project, it automatically optimizes images to reduce file sizes without compromising visual quality. This helps improve the performance of your web application by reducing the amount of data that needs to be downloaded by users.

Parcel automatically minifies various types of assets, including JavaScript, CSS, and HTML, during the bundling process
Parcel minifies JavaScript code by removing comments, unnecessary whitespace, and renaming variables to shorter names. This process helps reduce the size of JavaScript files, improving page load times.
While minification is beneficial for production builds to optimize file sizes, during development, Parcel often provides a development server that serves unminified code for easier debugging and a more readable codebase.
parcel diagnostics > better error handling etc etc etc
Parcel does tree shaking : The bundler analyzes the dependencies between modules and identifies which parts of the code are not being used. This includes functions, variables, or even entire modules that are not referenced anywhere in your application.
Parcel creates a different bundle for development and different for production.


let us see ow can we make a production build through parcel : command : npx parcel build index.html
As soon as you will run this command you will see that there is this error "Target "main" declares an output file path of "App.js" which does not match the compiled bundle type "html". this is because when you did npm init a configuration file named package.json was created  that asked for entry point and it was "App.js" so it conflicted with the index.html given as entrypoint in above command so you remove that line in package.json file first and then run the above file.
As you can see that dist had the development build and this now has production build too right ?  you cna see the optimised compressed minified code ready for production.
This production ready app is fast ofcourse.




I can even decide that on which browsers to which version should my app definitely be working by writing tit as configurationin package.json.
  
  
  A liitle take away in between :
  (
    http vs https 
    HTTP is the standard protocol for transferring data over the internet, but it does not provide any encryption or security measures. This means that the data transmitted between the user's browser and the website's server is not encrypted and can be intercepted by third parties. For this reason, HTTP is considered "not secure."
    
    HTTPS is the secure version of HTTP. It incorporates SSL/TLS encryption protocols to ensure that the data exchanged between the user and the server is encrypted and secure. This encryption helps protect sensitive information such as login credentials, personal details, and financial transactions.
  )
  