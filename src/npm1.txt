NPM (Node Package Manager) is a package manager for JavaScript programming language.
npm (Node Package Manager) and Node.js versions are tightly coupled, and it's generally recommended to use compatible versions. When you install Node.js, npm is included with it, and the version of npm bundled with a specific version of Node.js may have optimizations or features that work best with that Node.js version.

You need to install Node.js separately on your machine before using npm or running JavaScript code on the server side.
It serves as a central repository for publishing and sharing open-source JavaScript libraries and tools.
NPM simplifies the process of managing dependencies, installing packages, and handling project .
NPM is used to install, share, and manage packages of JavaScript code. 
NPM is primarily accessed through a command-line interface. Developers use commands such as npm install, npm update, npm uninstall, and others to interact with NPM and manage packages in their projects.
NPM has a central registry that hosts a vast collection of JavaScript packages. The default registry is the public NPM registry (https://registry.npmjs.org/), where developers can publish their packages, making them available for others to discover and use.
NPM helps manage project dependencies by tracking and installing the necessary packages that a project relies on. The dependencies and their versions are typically specified in a file called package.json in the root of the project.

NPM allows developers to define and run custom scripts in their projects. These scripts can be configured in the package.json file, and common scripts include tasks like running tests, building the project, or starting a development server.

a package refers to a collection of files, usually bundled together in a specific structure, that provides a certain functionality or feature. 

A library is a collection of pre-written code and functionalities that can be reused by other programs. It is a set of functions and procedures that can be used by applications for specific tasks without rewriting the code.
Libraries typically consist of functions, classes, or modules that provide specific capabilities. 


Packages often have dependencies on other packages or libraries. npm helps manage these dependencies by automatically installing the required packages when a developer installs a particular package for their project. The dependencies are usually listed in a package.json file.

 Each package includes metadata that describes the package, such as its name, version, author, and license information. This metadata is stored in a file named package.json within the package.
 Packages follow semantic versioning (SemVer), where version numbers consist of three parts: MAJOR.MINOR.PATCH. This versioning scheme helps developers understand the compatibility and changes introduced in different releases.
 
 
'When a developer wants to use a particular package in their project, they use the npm install command, specifying the package name. npm then downloads and installs the package along with its dependencies, making it available for use in the project.



npm init is a command used to initialize a new Node.js project and create a package.json file. The package.json file is a crucial component in Node.js development as it contains metadata about the project, including its name, version, description, entry point, dependencies, and various other configuration settings.


The package.json file serves as a central configuration file for Node.js projects, and it is crucial for managing dependencies, defining scripts, and sharing project metadata with others.
A package.json file is a metadata file used in Node.js projects to define various properties and configurations for the project. It serves as a central configuration file that contains information about the project, its dependencies, scripts, and other metadata. The file is written in JSON (JavaScript Object Notation) format.

package.json:

Purpose: The package.json file is a metadata file for a Node.js project. It contains information about the project, its dependencies, scripts, and other metadata.
Key Contents:
Project Information: Name, version, description, author, license, etc.
Dependencies: Lists the project's runtime dependencies.
DevDependencies: Lists dependencies used during development, testing, and build processes.
Scripts: Defines commands that can be executed using npm.
Main File: Specifies the entry point of the application.
Repository, Author, License: Additional metadata.




The most important package in our project is a bundler.
when you install a bundler like Webpack, Parcel, or Rollup using a package manager like npm (Node Package Manager), you are essentially installing it as a package. These bundlers are distributed and managed as npm packages, and they become part of the development dependencies in your project.


Webpack and parcel are popular open-source JavaScript module bundlers. Its primary purpose is to take multiple JavaScript, CSS, and other related files, and bundle them together into a single file or a few files, optimizing the loading and execution of web applications.

we are using parcel in our project.




When you use a bundler like Webpack or Parcel in a project, it is typically added as a development dependency (--save-dev) rather than a regular dependency (--save). The distinction between development dependencies and regular dependencies is based on the purpose of the package within the project.

Bundlers are primarily used during the development phase to bundle and optimize assets, manage modules, and handle other development-specific tasks.
In a production environment, the bundled and optimized files generated by the bundler are what is needed, but the bundler itself is not required for the application to run.



After you just run :  npm  install -D parcel 
you can see there is a devdependency included in your package.json and it has the latest version of parcel and also there is another file package-lock.json


package-lock.json:

Purpose: The package-lock.json file is generated by npm during the installation of project dependencies.(basically keeping a track of exact versions of all the dependencies of your project)

Key Contents:
Dependency Tree: A complete tree structure of the project's dependencies.
Specific Versions: Exact versions of each package and its dependencies.
Integrity Hash: A hash calculated based on the package's contents to ensure integrity.


In a package.json file, the tilde (~) and caret (^) symbols are used to specify version ranges for dependencies.
These symbols define the acceptable range of versions for a package when installing or updating dependencies.


Tilde (~):

The tilde specifies a "patch" level version constraint. When you see a version like ~1.2.3, it means any version that is compatible with 1.2.3 but allows for patch-level updates (bug fixes).
For example, ~1.2.3 allows any version in the range 1.2.x where x is the latest patch version.

Caret (^):

The caret specifies a "minor" level version constraint. When you see a version like ^1.2.3, it means any version that is compatible with 1.2.3 but allows for both patch-level and minor-level updates.
For example, ^1.2.3 allows any version in the range 1.x.x where x is the latest minor or patch version.


These version ranges help manage dependencies in a way that allows for automatic updates while avoiding breaking changes. The primary difference between the tilde and caret is the level of flexibility they provide in terms of which updates are allowed.

The tilde (~) allows only patch-level updates and is more restrictive.
The caret (^) allows both patch-level and minor-level updates, making it more permissive.




we saw that so many node modules also get installed when i installed parcel from npm . This is because package.json file has only configuration but the actual code to the dependencies i installed from npm lies in node modules(You cans see the code for parcel their in the node modules ) But wait we just wanted parcel then what is this number of node modules ? actually they are other libraries or dependencies that parcel is depenedent on.


every dependecy has its own package.json



you just put node_module file in gitignore file because ofcourse we do not want to push so much data to out git or production as we have package.json and package-lock.json files with me (which should be pushed to production or git) so, depending on the dependencies that my project requires written in  package.json and package-lock.json node modules can be reinstalled .










